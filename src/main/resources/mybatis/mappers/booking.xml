<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="booking">

	<!-- [A] 회원의 담당 트레이너 찾기 -->
	<select id="selectTrainerIdByMemberId" parameterType="int" resultType="int">
		SELECT trainer_id
		FROM pt_member
		WHERE member_id = #{value}
	</select>

	<!-- [B] 특정 날짜의 근무칸 목록 -->
	<resultMap id="SlotMap" type="map">
		<result column="work_hour" property="hour" />
		<result column="avail_id" property="availabilityId" />
	</resultMap>
	<select id="selectSlotsByTrainerAndDate" parameterType="map" resultMap="SlotMap">
		SELECT work_hour, avail_id
		FROM trainer_availability
		WHERE trainer_id =
		#{trainerId}
		AND work_date = #{workDate}
		ORDER BY work_hour
	</select>

	<!-- [C] 해당 날짜에 이미 예약된 근무칸 목록 -->
	<select id="selectBookedAvailabilityIds" parameterType="map" resultType="int">
		SELECT r.availability_id
		FROM reservation r
		JOIN trainer_availability ta ON
		ta.avail_id = r.availability_id
		WHERE ta.trainer_id = #{trainerId}
		AND ta.work_date = #{workDate}
		AND r.status IN ('BOOKED','ATTENDED')
	</select>

	<!-- [D-1] 예약 INSERT(단건) -->
	<insert id="insertReservation">
		INSERT INTO reservation (member_id, availability_id, status, memo)
		VALUES (#{memberId}, #{availabilityId}, 'BOOKED', #{memo})
	</insert>

	<!-- [D-2] 예약 INSERT(배치) -->
	<insert id="insertReservationBatch">
		INSERT INTO reservation (member_id, availability_id, status, memo)
		VALUES
		<foreach collection="availabilityIds" item="aid" separator=",">
			(#{memberId}, #{aid}, 'BOOKED', #{memo})
		</foreach>
	</insert>

	<!-- [E] 회원 달력 이벤트 -->
	<select id="selectMemberEventsByRange" parameterType="map" resultType="com.javaex.vo.CalendarEventVO">
	 	<![CDATA[
		    SELECT
		      r.reservation_id AS id,
		      TIMESTAMP(ta.work_date, MAKETIME(ta.work_hour, 0, 0))                                 AS start,
		      DATE_ADD(TIMESTAMP(ta.work_date, MAKETIME(ta.work_hour, 0, 0)), INTERVAL 1 HOUR)      AS end,
		      0 AS allDay,
		      ta.trainer_id AS trainerId,
		      r.member_id   AS memberId
		    FROM reservation r
		    JOIN trainer_availability ta ON ta.avail_id = r.availability_id
		    WHERE r.member_id = #{memberId}
		      AND r.status IN ('BOOKED','ATTENDED')
		      AND TIMESTAMP(ta.work_date, MAKETIME(ta.work_hour, 0, 0)) >= #{start}
		      AND TIMESTAMP(ta.work_date, MAKETIME(ta.work_hour, 0, 0)) <  #{end}
		    ORDER BY start ASC
		]]>
	</select>

	<!-- [F] 리스트 (cancelable 포함) ※ 이 쿼리는 파일에 '한 번만' 존재해야 합니다 -->
	<select id="selectScheduleRowsForMember" parameterType="int" resultType="com.javaex.vo.ScheduleRowVO">
	  <![CDATA[
		  SELECT
		      x.no,
		      DATE_FORMAT(x.start_dt, '%Y.%m.%d') AS date,
		      DATE_FORMAT(x.start_dt, '%H:%i')     AS time,
		      x.name,
		      x.memberId,
		      x.total,
			  CAST(COALESCE(x.used, 0) AS UNSIGNED) AS used,
			  CAST(GREATEST(x.total - COALESCE(x.used, 0), 0) AS UNSIGNED) AS remain,
			  (x.start_dt > DATE_ADD(NOW(), INTERVAL 24 HOUR)) AS cancelable
		  FROM (
		      SELECT
		          r.reservation_id AS no,
		          TIMESTAMP(ta.work_date, MAKETIME(ta.work_hour, 0, 0)) AS start_dt,
		          ut.user_name AS name,
		          r.member_id  AS memberId,
		          pm.total_sessions AS total,

		          COUNT(*) OVER (
		            PARTITION BY r.member_id
		            ORDER BY ta.work_date, ta.work_hour
		            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
		          ) AS used
		      FROM reservation r
		      JOIN trainer_availability ta ON ta.avail_id = r.availability_id
		      JOIN users ut  ON ut.user_id  = ta.trainer_id
		      JOIN pt_member pm ON pm.member_id = r.member_id
		      WHERE r.member_id = #{value}
		        AND r.status IN ('BOOKED','ATTENDED')
		  ) x
		  ORDER BY x.start_dt DESC;
	  ]]>
	</select>

	<!-- [G] 예약 취소 (회원 본인 + BOOKED + 시작 24시간 이전) -->
	<delete id="deleteReservationOfMember" parameterType="map">
		DELETE r
		FROM reservation r
		JOIN trainer_availability ta ON ta.avail_id = r.availability_id
		WHERE
		r.reservation_id = #{reservationId}
		AND r.member_id = #{memberId}
		AND r.status = 'BOOKED'
		AND TIMESTAMP(CONCAT(ta.work_date,'
		',LPAD(ta.work_hour,2,'0'),':00:00'))
		> NOW() + INTERVAL 24 HOUR
	</delete>

	<!-- (선택) 잔여 PT 확인용 쿼리 -->
	<select id="selectTotalSessions" parameterType="int" resultType="int">
		SELECT total_sessions FROM pt_member WHERE member_id = #{value}
	</select>

	<select id="countUsedByMember" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM reservation
		WHERE member_id = #{value}
		AND status IN
		('BOOKED','ATTENDED')
	</select>

	<!-- 트레이너 달력 이벤트: BOOKED/ATTENDED만 노출 -->
	<select id="selectTrainerEventsByRange" parameterType="map" resultType="com.javaex.vo.CalendarEventVO">
	  <![CDATA[
	  SELECT
	      r.reservation_id AS id,
	      ta.trainer_id    AS trainerId,
	      r.member_id      AS memberId,
	      m.user_name      AS title,       -- ✅ 제목 채움
	      m.user_name      AS memberName,  -- (계속 사용)
	      TIMESTAMP(CONCAT(ta.work_date,' ', LPAD(ta.work_hour,2,'0'),':00:00')) AS start,
	      DATE_ADD(TIMESTAMP(CONCAT(ta.work_date,' ', LPAD(ta.work_hour,2,'0'),':00:00')), INTERVAL 1 HOUR) AS end,
	      0 AS allDay
	  FROM reservation r
	  JOIN trainer_availability ta ON ta.avail_id = r.availability_id
	  JOIN users m ON m.user_id = r.member_id
	  WHERE ta.trainer_id = #{trainerId}
	    AND r.status IN ('BOOKED','ATTENDED')
	    AND TIMESTAMP(CONCAT(ta.work_date,' ', LPAD(ta.work_hour,2,'0'),':00:00')) >= #{start}
	    AND TIMESTAMP(CONCAT(ta.work_date,' ', LPAD(ta.work_hour,2,'0'),':00:00')) <  #{end}
	  ORDER BY start
	  ]]>
	</select>

</mapper>

