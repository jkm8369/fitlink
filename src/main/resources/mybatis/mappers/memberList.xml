<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="memberList">

  <!-- (A) 트레이너 담당 멤버리스트 (VO 반환) -->
  <select id="selectMemberListForTrainer" parameterType="int" resultType="com.javaex.vo.MemberVO">
    <![CDATA[
    SELECT
      u.user_id                         AS memberId,
      u.user_name                       AS memberName,
      DATE_FORMAT(u.birthdate,'%y%m%d') AS birth,
      mp.job                            AS job,
      mp.consult_date                   AS consultDate,
      mp.goal                           AS goal,
      NULL                              AS memo,
      NULL                              AS phoneNumber,
      COALESCE(pt_sum.total_sessions, 0) AS ptRegisteredCnt,
      COALESCE(res_sum.used_cnt, 0)      AS ptUsedCnt,
      GREATEST(COALESCE(pt_sum.total_sessions,0) - COALESCE(res_sum.used_cnt,0), 0)
                                         AS ptRemainingCnt
    FROM users u
    LEFT JOIN member_profile mp ON mp.member_id = u.user_id
    LEFT JOIN (
      SELECT pc.member_id, SUM(pc.total_sessions) AS total_sessions
      FROM pt_contract pc
      WHERE pc.trainer_id = #{_parameter}
      GROUP BY pc.member_id
    ) pt_sum ON pt_sum.member_id = u.user_id
    LEFT JOIN (
      SELECT r.member_id, COUNT(*) AS used_cnt
      FROM reservation r
      JOIN availability a ON a.availability_id = r.availability_id
      WHERE a.trainer_id = #{_parameter}
        AND r.status IN ('BOOKED','COMPLETED')
      GROUP BY r.member_id
    ) res_sum ON res_sum.member_id = u.user_id
    WHERE u.role = 'member'
      AND u.assigned_trainer_id = #{_parameter}
    ORDER BY u.user_name ASC, u.user_id ASC
    ]]>
  </select>

  <!-- (B) 단건 상세 (VO 반환, 소유 검증) -->
  <select id="selectMemberDetail" parameterType="map" resultType="com.javaex.vo.MemberVO">
    <![CDATA[
    SELECT
      u.user_id                          AS memberId,
      u.user_name                        AS memberName,
      u.phone_number                     AS phoneNumber,
      DATE_FORMAT(u.birthdate,'%y%m%d')  AS birth,
      mp.job                             AS job,
      mp.consult_date                    AS consultDate,
      mp.goal                            AS goal,
      mp.memo                            AS memo,
      COALESCE(pt_sum.total_sessions, 0) AS ptRegisteredCnt,
      COALESCE(res_sum.used_cnt, 0)      AS ptUsedCnt,
      GREATEST(COALESCE(pt_sum.total_sessions,0) - COALESCE(res_sum.used_cnt,0), 0)
                                         AS ptRemainingCnt
    FROM users u
    LEFT JOIN member_profile mp ON mp.member_id = u.user_id
    LEFT JOIN (
      SELECT pc.member_id, SUM(pc.total_sessions) AS total_sessions
      FROM pt_contract pc
      WHERE pc.trainer_id = #{trainerId}
      GROUP BY pc.member_id
    ) pt_sum ON pt_sum.member_id = u.user_id
    LEFT JOIN (
      SELECT r.member_id, COUNT(*) AS used_cnt
      FROM reservation r
      JOIN availability a ON a.availability_id = r.availability_id
      WHERE a.trainer_id = #{trainerId}
        AND r.status IN ('BOOKED','COMPLETED')
      GROUP BY r.member_id
    ) res_sum ON res_sum.member_id = u.user_id
    WHERE u.user_id = #{memberId}
      AND u.role = 'member'
      AND u.assigned_trainer_id = #{trainerId}
    ]]>
  </select>

  <!-- (C) 기본정보 업데이트 -->
  <update id="updateUsersBasic" parameterType="map">
    <![CDATA[
    UPDATE users
       SET user_name    = #{userName},
           phone_number = #{phoneNumber},
           birthdate    = STR_TO_DATE(#{birthdate}, '%y%m%d')
     WHERE user_id = #{memberId}
       AND role    = 'member'
    ]]>
  </update>

  <!-- (D) 프로필 upsert -->
  <insert id="upsertMemberProfile" parameterType="map">
    <![CDATA[
    INSERT INTO member_profile (member_id, job, consult_date, goal, memo, updated_at)
    VALUES (#{memberId}, #{job}, #{consultDate}, #{goal}, #{memo}, NOW())
    ON DUPLICATE KEY UPDATE
      job          = VALUES(job),
      consult_date = VALUES(consult_date),
      goal         = VALUES(goal),
      memo         = VALUES(memo),
      updated_at   = NOW()
    ]]>
  </insert>

  <!-- (E) PT 계약 추가 -->
  <insert id="insertPtContract" parameterType="map">
    <![CDATA[
    INSERT INTO pt_contract (member_id, trainer_id, total_sessions, created_at)
    VALUES (#{memberId}, #{trainerId}, #{totalSessions}, NOW())
    ]]>
  </insert>

  <!-- (F) 예약 삭제(해당 트레이너 것만) -->
  <delete id="deleteReservationsByMemberAndTrainer" parameterType="map">
    <![CDATA[
    DELETE r FROM reservation r
    JOIN availability a ON a.availability_id = r.availability_id
    WHERE r.member_id = #{memberId}
      AND a.trainer_id = #{trainerId}
    ]]>
  </delete>

  <!-- (G) 프로필 삭제 (옵션) -->
  <delete id="deleteMemberProfile" parameterType="int">
    <![CDATA[
    DELETE FROM member_profile WHERE member_id = #{value}
    ]]>
  </delete>

  <!-- (H) PT 계약 삭제(해당 트레이너 것만) -->
  <delete id="deletePtContractsByMemberAndTrainer" parameterType="map">
    <![CDATA[
    DELETE FROM pt_contract
     WHERE member_id = #{memberId}
       AND trainer_id = #{trainerId}
    ]]>
  </delete>


  <!-- (I) 회원 생성 -->
  <insert id="insertUser" parameterType="map" useGeneratedKeys="true" keyProperty="userId">
    INSERT INTO users
      (login_id, password, user_name, phone_number, birthdate, gender, role, created_at)
    VALUES
      (#{loginId}, #{password}, #{userName}, #{phoneNumber}, #{birthdate}, #{gender}, 'member', NOW())
  </insert>

  <!-- (J) 트레이너 배정 -->
  <update id="assignTrainer" parameterType="map">
    UPDATE users
       SET assigned_trainer_id = #{trainerId}
     WHERE user_id = #{userId}
  </update>

  <!-- (K) NEW: 트레이너 배정 해제 (표에서만 제거) -->
  <update id="unassignTrainer" parameterType="map">
    <![CDATA[
    UPDATE users
       SET assigned_trainer_id = NULL
     WHERE user_id = #{memberId}
       AND assigned_trainer_id = #{trainerId}
       AND role = 'member'
    ]]>
  </update>
  
  <!-- NEW: login_id로 유저 기본정보 조회 -->
  <select id="selectUserBasicByLoginId" parameterType="string" resultType="map">
  <![CDATA[
    SELECT
      user_id                         AS memberId,
      user_name                       AS userName,
      phone_number                    AS phoneNumber,
      DATE_FORMAT(birthdate,'%y%m%d') AS birth
    FROM users
    WHERE login_id = #{value}
    LIMIT 1
    ]]>
  </select>
  

</mapper>